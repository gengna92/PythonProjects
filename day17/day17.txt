day18
1. 今日内容
	1. 中间件
		https://www.cnblogs.com/maple-shaw/articles/9333824.html
		
		
	
		process_request(self,request)
			参数:
				request  请求的对象 和 视图中是同一个
			
			执行时间: 
					在视图函数之前
			
			执行顺序:
					按照注册的顺序 顺序执行
			
			返回值:
					None:  走正常流程
					HttpResponse:   下一个中间中的process_request和视图不执行,直接执行当前中间件中process_response方法
					
					
		process_response(self, request, response)
			参数:
				request  请求的对象 和 视图中是同一个
				response  响应对象
			
			执行时间: 
					在视图函数之后
			
			执行顺序:
					按照注册的顺序 倒叙执行
			
			返回值:
					HttpResponse
					
		process_view(self, request, view_func, view_args, view_kwargs):
			参数:
				request  请求的对象 和 视图中是同一个
				view_func   视图函数
				view_args   给视图函数的位置参数
				view_kwargs 给视图函数的关键字参数
			
			执行时间: 
					在视图函数之前,在process_request之后
			
			执行顺序:
					按照注册的顺序 顺序执行
			
			返回值:
					None:  走正常流程
					HttpResponse:   下一个中间中的process_view和视图不执行,直接执行最后一个中间件中的process_response
				

		process_exception(self, request, exception):

			参数:
				request  请求的对象 和 视图中是同一个
				exception  错误对象
			
			执行时间: 
					有异常才执行
			
			执行顺序:
					按照注册的顺序 倒叙执行
			
			返回值:
					None:  交给下一个中间件中的process_exception方法处理异常，都没有处理交给django处理
					HttpResponse:  下一个中间中的process_exception,直接走最后一个中间件中的process_response
					
		process_template_response(self,request,response)
			参数:
				request  请求的对象 和 视图中是同一个
				response  视图函数返回的template_response对象
			
			执行时间: 
					视图返回的是一个template_response对象，才执行
			
			执行顺序:
					按照注册的顺序 倒叙执行
			
			返回值:
					HttpResponse:  必须要返回的
		
	csrf相关的的装饰器
		from django.views.decorators.csrf import csrf_exempt,csrf_protect，ensure_csrf_cookie
	
		@csrf_exempt   # 不在进行csrf校验  
		@csrf_protect  # 进行csrf校验
	
	保证有csrftoken的cookie
		1. {% csrf_token %}
		2. 给视图上加ensure_csrf_cookie装饰器
		
	
	2. ajax
		https://www.cnblogs.com/maple-shaw/articles/9524153.html
		
		ajax 
			使用js发请求，传输的数据通常是json
		特点：
			不刷新页面
			异步
			传输的数据量少
			
		1. 计算示例
				$.ajax({
					url: '/calc2/',
					type: 'post',
					data: {
						v1: $('[name="ii1"]').val(),
						v2: $('[name="ii2"]').val(),
					},
					success: function (res) {
						$('[name="ii3"]').val(res)

					}
				})
			
		2. ajax参数介绍
		
				$.ajax({
					url: '/test/',     // 发送的地址
					type: 'post',       // 请求方式
					data: {             // 请求数据
						name: 'alex',
						age: 73,
						hobby: JSON.stringify(['抽烟', '喝酒', '烫头'])
					},
					success: function (res) {   // 成功时的回调函数
						alert(res)

					},
					error: function (res) {
						console.log('111');
						console.log(res)
					}
				})
		
		3. 提交post请求的设置
			1. data加csrfmiddlewaretoken的键值对
				data: {
					csrfmiddlewaretoken: $('[name="csrfmiddlewaretoken"]').val(),
				},
			2. headers 加请求头 x-csrftoken
				headers:{
				'x-csrftoken':$('[name="csrfmiddlewaretoken"]').val()
				},
			
			3. 引入文件 
	3. form 
		https://www.cnblogs.com/maple-shaw/articles/9537309.html
		1. 注册示例
			from django import forms

			class RegForm(forms.Form):
				user = forms.CharField(label='用户名')
				pwd = forms.CharField(label='密码',widget=forms.PasswordInput)
			
		2. form组件的使用
			from django import forms


			class RegForm(forms.Form):
				user = forms.CharField(
					label='用户名',
					widget=forms.TextInput(attrs={'class': 'form-control'}))
				pwd = forms.CharField(
					label='密码',
					widget=forms.PasswordInput(attrs={'class': 'form-control'}),
					min_length=6)

			使用：
				视图：
					form_obj = RegForm()
					return render(request, 'reg2.html', {'form_obj': form_obj})
					
					
					orm_obj = RegForm(data=request.POST) # 包含提交数据的form对象
					if form_obj.is_valid():   # 对数据进行校验
						form_obj.cleaned_data   # 清洗后的数据  经过校验的数据
					
				模板：
					{{ form_obj.as_p }}   ——》 生成p标签  p标签包含 label input
					{{ form_obj.user }}   ——》 生成input标签
					{{ form_obj.user.label }}   ——》 该input标签的label内容  
					{{ form_obj.user.id_for_label }}   ——》 该input标签的id
					{{ form_obj.user.errors }}   ——》 该input标签的所有错误
					{{ form_obj.user.errors.0 }}   ——》 该input标签的第一个错误
					
					
					{{ form_obj.errors }}  ——》 所有字段的错误
					
			
		3. 字段及参数的介绍
			常用字段
				CharField    input框
				ChoiceField   select框
				MultipleChoiceField  多选框
				
			参数
				required   是否允许为空
				widget 	   插件
				label      中文标签
				initial    初始值
				error_messages    自定义错误提示
				validators    校验规则
				disabled   是否不可编辑
	
		4. 内置校验和自定义校验
				内置校验
					required
					max_length  
					min_length
				自定义校验校验器
					1. django提供的校验器
					from django.core.validators import RegexValidator
					2. 自定义函数
						from django.core.exceptions import ValidationError


						def check_user(value):
							if 'alex' in value:
								raise ValidationError('含有非法字符')  # 没有通过校验  抛出异常
		
		5. is_valid源码解析及局部、全局钩子
		
			局部钩子	clean_字段名
			    def clean_user(self):
					# 局部钩子  对当前的字段的值进行校验
					# 通过校验  返回字段的值
					# 不通过校验  抛出异常
					value = self.cleaned_data.get('user')
					if 'alex' in value:
						raise ValidationError('含有非法字符')
					else:
						return value
			全局钩子	
				def clean(self):
					# 全局钩子
					# 通过校验  返回所有的值
					# 不通过校验  抛出异常，还自己添加错误信息
					pwd = self.cleaned_data.get('pwd', '')
					re_pwd = self.cleaned_data.get('re_pwd')
					if pwd == re_pwd:
						return self.cleaned_data
					else:
						self.add_error('re_pwd','两次密码不一致')
						raise ValidationError('两次密码不一致')

	4. CRM
		客户关系管理系统
		1. 业务 CRM表结构    增删改查
		2. 权限组件  ！！！！  
		
		模板的查找顺序：
		   先找TEMPLATES DIRS 目录下的模板，再按照APP注册顺序去APP下查找TEMPLATES
		   
		  
		静态文件的查找顺序：
		   先找STATICFILES_DIRS目录下的静态文件，再按照APP注册顺序去APP下查找static

		   
		   
		   
		   


