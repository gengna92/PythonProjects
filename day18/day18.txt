day18



1. 分页
	批量插入
	obj_list = []

	for i in range(0, 305):
		obj_list.append(models.Department(name="部门- {}".format(i)))

	models.Department.objects.bulk_create(obj_list)
	
	
2. 补充知识
	显示：
		all_class = models.ClassList.objects.all()
		
		1. 普通字段
			对象.字段名
		2. choice字段   # （1,'男'） 
			对象.字段名    ——》 1
			对象.get_字段名_display()   ——》'男'  
		3. 外键
			对象.外键    ——》 所关联的对象  调用对象中__str__方法
			对象.外键.字段名
			
		4. 自定义方法
			对象.方法()     ——》  模板中   对象.方法
			
			1. 多对多字段：
				def show_teachers(self):
					return ' | '.join([teacher.username for teacher in self.teachers.all()])
    
			2. HTML标签
				from django.utils.safestring import mark_safe

			
				def get_teacher(self):
					return mark_safe('<a href="https://www.cnblogs.com/#p5"> {} </a>'.format(self.tutor.username))

					
	class UserForm(BSForm):
		re_password = forms.CharField(label='确认密码', widget=forms.PasswordInput(attrs={'class': 'form-control'}))
		
		class Meta:
			model = models.User
			fields = ['username', 'password', 're_password', 'gender', 'depart']
			# exclude = []  # 排除
			
			labels = {
				'username': '用户名',
				# 're_password': '确认密码'
			}
			
	补充： 
		1. Meta中的配置对新增字段不起作用
		2. fields = [ ]  列表中的字段 有序			
	
3. 权限控制
在web开发中，什么是权限？
	url代表的权限
	
	

inclusion_tag    返回的是一个HTML代码段

定义：
	1. 创建一个名为templatetags的python包
	2. 在包内创建一个py文件  my_tags.py
	3. py文件中写代码
		from django import template
		register = template.Library()  # register 不能变
	4. 
		@register.inclusion_tag('menu.html')
		def menu(request):
			menu_list = request.session.get(settings.MENU_SESSION_KEY)
			return {'menu_list': menu_list}  # 字典要交给模板进行渲染
使用：(模板中使用)

	 {% load my_tags %}
     {% menu request %}
	
	